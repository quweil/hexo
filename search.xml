<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/article/0.html"/>
      <url>/article/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><ul><li><p>setTimeout()：定时任务，延迟指定时间，执行一次回调函数（一次执行）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时执行任务(定时任务)</span></span><br><span class="line"><span class="keyword">let</span> flag = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>,flag);</span><br><span class="line">    <span class="comment">//清除定时任务</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(flag);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>注:以上程序为3秒之后输出：hello,1</p><p><strong>案例：定时跳转到指定位置</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒之后返回主页...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> flag2;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> t = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">backHome</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearTimeout</span>(flag2);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;time&quot;</span>).<span class="property">innerText</span> = t;</span></span><br><span class="line"><span class="language-javascript">        t--;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;回到主页&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        flag2 = <span class="built_in">setTimeout</span>(backHome,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">backHome</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>setInterval()：定时任务，每隔指定时间执行一次回调函数（反复执行）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定时执行任务（反复执行）</span></span><br><span class="line"><span class="keyword">let</span> flag2 = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello interval--&gt;&#x27;</span>+count);</span><br><span class="line">    count++;</span><br><span class="line">    <span class="comment">//当count值为10时结束定时任务</span></span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(flag2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>注：以上代码每隔0.3秒执行一次输出：<code>&#39;hello interval--&gt;&#39;+count</code></p><p><strong>案例1：动态电子时钟</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;t&quot;</span>&gt;</span>2020年12月28日 10:22:22<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//日期格式化函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">DateFormater</span>(<span class="params">date</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> y = date.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        m = m &gt;= <span class="number">10</span> ? m : <span class="string">`0<span class="subst">$&#123;m&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> d = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">        d = d &gt;= <span class="number">10</span> ? d : <span class="string">`0<span class="subst">$&#123;d&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> h = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">        h = h &gt;= <span class="number">10</span> ? h : <span class="string">`0<span class="subst">$&#123;h&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> min = date.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">        min = min &gt;= <span class="number">10</span> ? min : <span class="string">`0<span class="subst">$&#123;min&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> s = date.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">        s = s &gt;= <span class="number">10</span> ? s : <span class="string">`0<span class="subst">$&#123;s&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>  <span class="string">`<span class="subst">$&#123;y&#125;</span>年<span class="subst">$&#123;m&#125;</span>月<span class="subst">$&#123;d&#125;</span>日 <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//指定定时任务，每隔1秒执行一次时间显示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;t&#x27;</span>).<span class="property">innerHTML</span> = <span class="title class_">DateFormater</span>(date);</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p><code>navigator</code>对象表示浏览器的信息，最常用的属性包括：</p><ul><li>navigator.appName：浏览器名称；</li><li>navigator.appVersion：浏览器版本；</li><li>navigator.language：浏览器设置的语言；</li><li>navigator.platform：操作系统类型；</li><li>navigator.userAgent：浏览器设定的<code>User-Agent</code>字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appName = &#x27;</span> + navigator.<span class="property">appName</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appVersion = &#x27;</span> + navigator.<span class="property">appVersion</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;language = &#x27;</span> + navigator.<span class="property">language</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;platform = &#x27;</span> + navigator.<span class="property">platform</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;userAgent = &#x27;</span> + navigator.<span class="property">userAgent</span>);</span><br></pre></td></tr></table></figure><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p><code>screen</code>对象表示屏幕的信息，常用的属性有：</p><ul><li>screen.width：屏幕宽度，以像素为单位；</li><li>screen.height：屏幕高度，以像素为单位；</li><li>screen.colorDepth：返回颜色位数，如8、16、24。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Screen size = &#x27;</span> + screen.<span class="property">width</span> + <span class="string">&#x27; x &#x27;</span> + screen.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可用宽度：&quot;</span>+screen.<span class="property">availWidth</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可用高度：&quot;</span>+screen.<span class="property">availHeight</span>)</span><br></pre></td></tr></table></figure><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><code>location</code>对象表示当前页面的URL信息。例如，一个完整的URL：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</span></span><br></pre></td></tr></table></figure><p>可以用<code>location.href</code>获取。要获得URL各个部分的值，可以这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">protocol</span>; <span class="comment">// &#x27;http&#x27;</span></span><br><span class="line">location.<span class="property">host</span>; <span class="comment">// &#x27;www.example.com&#x27;</span></span><br><span class="line">location.<span class="property">port</span>; <span class="comment">// &#x27;8080&#x27;</span></span><br><span class="line">location.<span class="property">pathname</span>; <span class="comment">// &#x27;/path/index.html&#x27;</span></span><br><span class="line">location.<span class="property">search</span>; <span class="comment">// &#x27;?a=1&amp;b=2&#x27;</span></span><br><span class="line">location.<span class="property">hash</span>; <span class="comment">// &#x27;#TOP&#x27;</span></span><br></pre></td></tr></table></figure><p>要加载一个新页面，可以调用<code>location.assign()</code>。如果要重新加载当前页面，调用<code>location.reload()</code>方法非常方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&#x27;重新加载当前页&#x27;</span> + location.<span class="property">href</span> + <span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">    location.<span class="title function_">reload</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    location.<span class="title function_">assign</span>(<span class="string">&#x27;/&#x27;</span>); <span class="comment">// 设置一个新的URL地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>history</code>对象保存了浏览器的历史记录，JavaScript可以调用<code>history</code>对象的<code>back()</code>或<code>forward ()</code>，相当于用户点击了浏览器的“后退”或“前进”按钮。</p><p>这个对象属于历史遗留对象，对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用<code>history.back()</code>可能会让用户感到非常愤怒。</p><p>新手开始设计Web页面时喜欢在登录页登录成功时调用<code>history.back()</code>，试图回到登录前的页面。这是一种错误的方法。</p><p>任何情况，你都不应该使用<code>history</code>这个对象了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;window.html&quot;</span>&gt;</span>window<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;screen.html&quot;</span>&gt;</span>screen<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;backward&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;forward&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;gotoPage&quot;</span>&gt;</span>跳转指定位置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(history);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;backward&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                history.<span class="title function_">back</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;forward&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                history.<span class="title function_">forward</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;gotoPage&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                history.<span class="title function_">go</span>(-<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="localStorage-amp-sessionStorage"><a href="#localStorage-amp-sessionStorage" class="headerlink" title="localStorage&amp;sessionStorage"></a>localStorage&amp;sessionStorage</h3><p>在html5中新增两个存储对象，其中一个称之为本地存储（localStorage），另一个称之为session存储(sessionStorage)；</p><ol><li><p>localStorage</p></li><li><p>sessionStorage</p><p>所谓本地存储即可以将数据(服务端数据)缓存到本地浏览器中，无论页面如何刷新，关闭甚至电脑重启等操作都不会影响数据，所存储的数据会一直存储在，除非手动清理。</p><pre><code>sessionStorage中存储的数据在一次会话中能一直存在，一旦浏览器关闭或者session有效期到达(20min)之后会自动清理。</code></pre></li></ol><p>无论是localStorage还是sessionStorage两者的操作API是一致的，缓存中存储的数据是以键值对为结构。</p><p>localStorage和sessionStorage常用函数:</p><ul><li><strong>setItem(key,value)：向缓存对象中添加一个元素，键和值都是String类型</strong></li><li><strong>getItem(key)：根据提供的key获取对应的值</strong></li><li><strong>removeItem(key)：从存储对象中清除指定键对应的元素</strong></li><li><strong>clear()：清除缓存中的所有内容</strong></li></ul><p>案例:</p><p><strong>login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;main.html&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return login(this)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">f</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> name = f.<span class="property">uname</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> pwd = f.<span class="property">pwd</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(name.<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;请输入用户名&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(pwd.<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;请输入密码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//向本地存储中存储数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// localStorage.setItem(&quot;username&quot;,name);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// localStorage.localStorage.setItem(&quot;username&quot;,name);</span></span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>,name);</span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;password&quot;</span>,pwd);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>main.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎你,<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;clearCache&quot;</span>&gt;</span>清除缓存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 从本地存储中获取数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let name = localStorage.getItem(&quot;username&quot;) || &quot;游客&quot;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> name = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>) || <span class="string">&quot;游客&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;user&quot;</span>).<span class="property">innerText</span> = name;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;clearCache&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//清除指定键对应的元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// localStorage.removeItem(&#x27;username&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//清除所有缓存数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// localStorage.clear();</span></span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//页面刷新</span></span></span><br><span class="line"><span class="language-javascript">            location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>localStorage和sessionStorage的应用场景：</p><p>localStorage适合用于进行网站首页数据的缓存，比如购物网站，门户网站等非安全性要求高的数据。</p><p>sessionStorage适合用于临时存储一次会话的信息，比如用户的登录账号密码等（对安全性要求高的数据）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/0.html"/>
      <url>/article/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS概述"><a href="#JS概述" class="headerlink" title="JS概述"></a>JS概述</h2><pre><code>javaScript简称JS，是一门运行在客户端浏览器的脚本语言（无法独立运行的程序设计语言）；是一门直译型语言（不需要编译），是一门客户端语言；Javascript同时也是一门弱类型的程序语句，以及基于事件驱动的语言。</code></pre><blockquote><p>关于强类型和弱类型：</p><p><strong>java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span></span><br><span class="line">&gt;<span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();    </span><br><span class="line"></span><br><span class="line">&gt;i = <span class="literal">true</span>; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><p>注意:java中任何变变量再使用前需要声明其数据类型，任何的变量一旦确定其类型，则只能赋予对应类型的值，运行期间不能修改为其他类型的数据，因此Java是一门强类型语言，即不是一门动态语言</p><p>javascript：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&gt;i = <span class="string">&quot;js&quot;</span></span><br><span class="line">&gt;i = <span class="literal">true</span>;</span><br><span class="line">&gt;i = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//variable变量</span></span><br><span class="line">&gt;<span class="keyword">var</span> j = <span class="number">100</span>;</span><br><span class="line">&gt;<span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line">&gt;<span class="keyword">var</span> s = <span class="number">3.14</span>;</span><br><span class="line">&gt;<span class="keyword">var</span> str = <span class="string">&quot;javascript&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//es6</span></span><br><span class="line">&gt;<span class="keyword">let</span> e = <span class="number">10</span>;</span><br><span class="line">&gt;<span class="keyword">const</span> c = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><p>javascript由于没有编译的过程，因此任何变量的数据类型确定是在运行期间动态绑定，并且还能再运行时修改其数据类型，因此，javascript是一门弱类型语言，即动态语言。</p><p>通过以上案例不难看出：</p><p>java是一门服务端语言（经过编译后，直接执行）</p><p>javascript是一门客户端语言（不要编译，运行期间动态绑定，效率相对较低，不适合进行服务器开发）</p></blockquote><h3 id="JS使用场景"><a href="#JS使用场景" class="headerlink" title="JS使用场景"></a>JS使用场景</h3><p>javascript一般用于对网页特效以及表单验证等涉及到网页动态效果的功能,例如:</p><ul><li>下拉菜单</li><li>回到顶部</li><li>楼层导航</li><li>轮播图</li><li><strong>表单验证</strong></li></ul><h3 id="JS组成"><a href="#JS组成" class="headerlink" title="JS组成"></a>JS组成</h3><p>javascript由以下三部分构成</p><ol><li><strong>ECMAScript核心语法</strong>：由ECMA-262定义，提供核心语言功能；</li><li>**浏览器对象模型(BOM)**：提供与浏览器交互的方法和接口;</li><li>**文档对象模型（DOM)**：提供访问和操作网页内容的方法和接口.</li></ol><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="HelloJS"><a href="#HelloJS" class="headerlink" title="HelloJS"></a>HelloJS</h3><p>javascript一般在html页面中进行编写，通常位于一对<code>&lt;script&gt;</code>之间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// System.out.println()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello js!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><p><code>&lt;script&gt;</code>标签可以在html的任意位置进行编写，常见的区域主要出现在以下两个位置</p><ul><li>head标签对之间</li><li><strong>body标签结尾处（推荐）</strong></li></ul></blockquote><h3 id="常见引入方式"><a href="#常见引入方式" class="headerlink" title="常见引入方式"></a>常见引入方式</h3><p>在html中使用javascript包含以下三种方式：</p><ol><li><p>直接在html页面中使用内联<code>&lt;script&gt;</code>标签编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            .....</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入外部的脚本文件(js文件)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/js01.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js文件(js01.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// System.out.println()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello js!&quot;</span>);</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line">i = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br></pre></td></tr></table></figure></li><li><p>直接在html元素中使用内嵌的方式使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;想啥呢，老铁！！&#x27;)&quot;</span>&gt;</span>点我看pain<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>关于href和src区别？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下，你就蒙蔽<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/logo.png&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;mp3/xiaopingguo.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href和src都用于关联外部的资源文件，区别在于href所关联的资源一旦执行到此处，则<strong>同步加载</strong></p><p>src所关联的资源，一旦执行到此处，则浏览器停止对页面进行渲染，先读取src关联的资源，并将资源<strong>替换</strong>到当前位置</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>虽然说js是一门弱类型语言，但是不代表不区分数据类型，js中也支持很多不同类型的数据，js的主要数据类型包含以下几类:</p><ul><li>数值型（包含浮点型）</li><li>字符串型</li><li>布尔型</li><li>对象<ul><li>普通对象</li><li>null</li><li>数组</li></ul></li><li>undefined</li></ul><h4 id="数值类型（number）"><a href="#数值类型（number）" class="headerlink" title="数值类型（number）"></a>数值类型（number）</h4><p>javascript中对于任何的数值都是使用的number的数据类型表示，没有所谓浮点型和整型之分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> i);<span class="comment">//number</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="number">3.14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> f);<span class="comment">//number</span></span><br></pre></td></tr></table></figure><blockquote><p>typeof是一个js中的一个运算符，判断指定变量是什么类型</p></blockquote><h4 id="字符串类型（string）"><a href="#字符串类型（string）" class="headerlink" title="字符串类型（string）"></a>字符串类型（string）</h4><p>javascript中对于所有的字符字符串统一使用string来表示，即没有字符和字符串之分，在js中可以使用单引号或者双引号表示字符串类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;中&quot;</span>;</span><br><span class="line">s = <span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s);<span class="comment">//string</span></span><br></pre></td></tr></table></figure><h4 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h4><p>javascript中也存在boolean类型，取值也只能是true和false,但是js中可以将任何的变量转换为boolean类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b); <span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(a));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="对象类型（object）"><a href="#对象类型（object）" class="headerlink" title="对象类型（object）"></a>对象类型（object）</h4><p>javascript中的对象有多种存在形式，其中一种比较常见的显示方式为类Java中map结构（键值对），在js中称之为<strong>json对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象(JSON对象)</span></span><br><span class="line"><span class="comment">//java: People p = new People()</span></span><br><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张麻子&quot;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">marry</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">group</span>:&#123;</span><br><span class="line">        <span class="attr">gid</span>:<span class="number">1001</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;vip1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fun</span>:[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><blockquote><p>以上javascript对象可以使用如下的Java类描述:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">&gt;<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">&gt;<span class="keyword">private</span> String name;</span><br><span class="line">&gt;<span class="keyword">private</span> String sex;</span><br><span class="line">&gt;<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&gt;<span class="keyword">private</span> <span class="type">boolean</span> marry;</span><br><span class="line">&gt;<span class="keyword">private</span> String[] fun;</span><br><span class="line">&gt;<span class="keyword">private</span> Group group;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">Group</span>&#123;</span><br><span class="line">&gt;<span class="keyword">private</span> <span class="type">int</span> gid;</span><br><span class="line">&gt;<span class="keyword">private</span> String name;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="数组类型（object-引用类型）"><a href="#数组类型（object-引用类型）" class="headerlink" title="数组类型（object-引用类型）"></a>数组类型（object-引用类型）</h4><p>javascript中的数组是以对象的形式存在，是一种引用类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span>  arr); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]];</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">Array</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// Object obj = new Object()</span></span><br><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// Object[] arr = new Object[?];</span></span><br></pre></td></tr></table></figure><h4 id="null类型（object）"><a href="#null类型（object）" class="headerlink" title="null类型（object）"></a>null类型（object）</h4><p>表示一个空对象，在内存申请了空间，但是没有为该申请的空间赋值，通常这种对象使用null表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> n);<span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(n));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><p>表示未申明的类型，与null类似，但是undefined并未申请任何空间。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>不同的数据类型之间必然会存在运算的操作，javascript中支持大量的运算符，javascript中的运算符主要包含以下几类：</p><ul><li>算术运算符</li><li>关系运算</li><li>布尔逻辑运算</li><li>位运算</li><li>三目运算</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*算术运算*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i / j); <span class="comment">// 0.5 因为js中没有整型浮点之分，因此算术运算时，直接获取的精确值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i++);   <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);     <span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++j);   <span class="comment">//11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*关系运算*/</span></span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line">j = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="comment">//比较两个变量是否是相同，会进行类型转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i == j);<span class="comment">// true</span></span><br><span class="line"><span class="comment">//比较两个变量是否相等，不会进行类型转换（会判断类型是否相等）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i === j);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> p2 = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 == p2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*位运算*/</span></span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i &lt;&lt; <span class="number">1</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*三目运算*/</span></span><br><span class="line">i = <span class="number">5</span>;</span><br><span class="line">j = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( i &gt; j ? i : j); <span class="comment">// 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><p>if语句的语法与Java基本类似，唯一不同的是Java中的if条件必须是一个布尔类型的表达式，但是js中if中可以编写任意类型的表达式，甚至是一个任何类型的变量，因为js中可以将任何的变量转换为boolean类型，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大爷，来玩啊！&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;三年高考，五年模拟来一套！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>i虽然是一个number类型，但是js引擎会自动将该变量转换为Boolean;js中具体会将哪些数值转为false,哪些数值转换为true?</p><ol><li><strong>对于数值类型（number）,任何的非0的值都是true</strong></li><li><strong>null和undefined转换为false</strong></li><li><strong>只要是存在的对象都是true</strong></li><li><strong>空字符串转换为false</strong></li></ol></blockquote><h5 id="swich"><a href="#swich" class="headerlink" title="swich"></a>swich</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="number">2020</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(m)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span>(y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">29</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">28</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">31</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>javascript中支持的循环语句主要包含两种</p><ul><li>for</li><li>while</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    document.write(i+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//while循环</span></span><br><span class="line"><span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">20</span>)&#123;</span><br><span class="line">    document.write(i+<span class="string">&quot;&amp;nbsp;&quot;</span>)</span><br><span class="line">        i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do...while循环</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    document.write(i+<span class="string">&quot;&amp;nbsp;&quot;</span>)</span><br><span class="line">        i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt; <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//for...in循环</span></span><br><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;lilei&#x27;</span>,<span class="string">&#x27;hanmeimei&#x27;</span>,<span class="string">&#x27;lily&#x27;</span>,<span class="string">&#x27;lucy&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n in arr)&#123;</span><br><span class="line">    console.log(arr[n]); <span class="comment">// 在对数组操作时，n表示的是元素的索引，而非元素本身</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> &#123;</span><br><span class="line">    id:<span class="number">1</span>,</span><br><span class="line">    name:<span class="string">&#x27;softeem&#x27;</span>,</span><br><span class="line">    age:<span class="number">15</span>,</span><br><span class="line">    birth:<span class="string">&#x27;2006-03-01&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n in user)&#123;</span><br><span class="line">    console.log(user[n]); <span class="comment">// 在对对象进行操作时，n表示的是对象中的属性，如果需要去除属性值，语法为 引用变量[n]</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(user.name);     <span class="comment">//softeem</span></span><br><span class="line">console.log(user[<span class="string">&#x27;name&#x27;</span>]);  <span class="comment">//softeem</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/0.html"/>
      <url>/article/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>SQL是Structured Query Language(结构化查询语言)的缩写;sql语句是专门为数据库管理提供的通用操作语言；语法类似于英语口语，在使用它时，只需要发出“做什么”的命令“怎么做”是不用使用者考虑的。sql语句分为以下几个大类：</p><ol><li><p><strong>DDL语句（数据定义语句）</strong></p><p>数据定义语句主要应用于对数据表的结构操作：比如建表，删除表，修改表的结构等；DDL语句包含以下命令：</p><ul><li>create （新建）</li><li>drop（删除，主要删除数据库中的结构，比如表，库等） </li><li>alter（主要用已有表删除，新建，修改行）</li><li>add(添加列)</li><li>modify（修改列）</li></ul></li><li><p><strong>DML语句（数据操作语句）</strong></p><p>数据操作语句一般用于对的语句数据库表中数据进行更新操作，比如添加，删除，修改数据等，DML语句包含以下命令:</p><ul><li>insert （对表新增加数据）</li><li>update（更新表字段）</li><li>delete（删除信息）</li></ul></li><li><p><strong>DQL语句（数据查询语句）</strong></p><p>数据查询语句一般用于对数据库表中数据进行查询操作，命令主要包含：select</p></li><li><p><strong>DCL语句（数据控制语句）</strong></p><p>数据控制语句一般用于对于数据库用户的权限管理，事务管理，DCL包含以下命令:</p><ul><li>grant （权限设置）</li><li>revoke（回收权限）</li><li>commit（事务提交）</li><li>rollback（事务回滚）</li></ul></li></ol><p><strong>DML操作是可以手动控制事务的开启、提交和回滚的。DDL操作是隐性提交的，不能rollback！</strong></p><blockquote><p><strong>显式提交：</strong> 用COMMIT命令直接完成的提交为显式提交。<br><strong>隐式提交：</strong>  用SQL命令间接完成的提交为隐式提交。这些命令是：  ALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，  EXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。<br><strong>自动提交：</strong>  若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，  系统将自动进行提交，这就是自动提交。其格式为：  SQL&gt;SET AUTOCOMMIT ON；</p></blockquote><h3 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h3><ol><li><p>创建一张数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp     <span class="comment">-- 创建表，名称叫emp</span></span><br><span class="line">(</span><br><span class="line">    eno <span class="type">int</span>, <span class="comment">--创建eno列，类型是int</span></span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">30</span>), <span class="comment">--创建ename列，类型是varchar长度是30字符</span></span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    sex <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>, <span class="comment">--创建sex列，类型是char</span></span><br><span class="line">    sal <span class="keyword">double</span>,</span><br><span class="line">    birth <span class="type">date</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><strong>关于mysql中字符长度问题：</strong></p><p>如果是utf8编码下，默认的中文字符占3个字节；如果是gbk编码，默认的中文占2个字节</p><p><strong>关于char类型和varchar类型：</strong></p><ul><li>char类型是定长字符串，类似于java中String；长度一旦定义则无法改变，并且无论数据是否够指定长度，都会占满，不够的用空格填充；char类型一般应用于长度确定的字符串类型，比如：性别，手机号，身份证号等；</li><li>varchar类型是可变长度字符串，类似java中StringBuffer；长度定义之后会根据实际填充的内容，选择占用多大空间，比较节省空间；varchar类型一般使用在长度不确定的字符串类型，比如:姓名，邮箱地址，评论信息等。</li></ul></blockquote></li></ol><p>2.显示表中所有与列等其他信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> fields <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><p>语法：</p><p><code>alter table 表名 [add/drop/modify/change/rename] 列名称</code> </p><ol><li><p>新增一个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> hiredate <span class="type">date</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">column</span> birth;</span><br></pre></td></tr></table></figure></li><li><p>修改列的类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp modify sal <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p>修改列名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp change job  ejob <span class="type">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure></li><li><p>修改表名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp rename <span class="keyword">to</span> tbemp;</span><br></pre></td></tr></table></figure></li></ol><h3 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h3><ol><li><p>显示表中所有的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbemp;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="insert语句（插入）"><a href="#insert语句（插入）" class="headerlink" title="insert语句（插入）"></a>insert语句（插入）</h4><p><strong>语法：</strong></p><p><code>insert into 表名(列名1，列名2...) values(列值1,列值2...)</code></p><ol><li><p>向表中添加数据(所有列)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbemp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;james&#x27;</span>,<span class="string">&#x27;manager&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8796</span>,<span class="string">&#x27;2018-01-22&#x27;</span>,<span class="number">28</span>);</span><br></pre></td></tr></table></figure></li><li><p>向某一些列插入值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbemp(eno,ename,ejob,sal) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;softeem&#x27;</span>,<span class="string">&#x27;CEO&#x27;</span>,<span class="number">1500000</span>);</span><br></pre></td></tr></table></figure></li><li><p>同时插入多条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbemp(eno,ename) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;来福&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;狗蛋&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;王二狗&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>插入数据出现中文乱码时解决方案：</strong></p><p>由于安装mysql使用的是UTF8编码，但是cmd命令行中默认为GBK编码，因此在命令行中</p><p>使用中文数据是会出现乱码；解决方式只需要在打开cmd命令行时输入以下命令：</p><ul><li><strong>set names gbk；</strong></li></ul><p>然后再进行插入操作即可解决（但是以上修改只对一次会话生效；如果只会再次使用cmd需要重新设置）</p></blockquote></li></ol><h3 id="select语句："><a href="#select语句：" class="headerlink" title="select语句："></a>select语句：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from student;-- 查询所有</span><br><span class="line">select id,name from student; -- 查询指定的字段</span><br><span class="line">select * from student where id=&#x27;1&#x27;;--条件查询</span><br><span class="line"> select * from student where id=&#x27;1&#x27; and sex =&#x27;男&#x27;;--多条件查询</span><br><span class="line">  select * from student where id=&#x27;1&#x27; or sex =&#x27;男&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="update语句（更新）"><a href="#update语句（更新）" class="headerlink" title="update语句（更新）"></a>update语句（更新）</h4><p><strong>语法：</strong></p><p><code>update 表名 set 列名1=值1,列名2=值2... where 条件   </code></p><ol><li><p>修改表中的一条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tbemp  <span class="keyword">set</span> hiredate<span class="operator">=</span><span class="string">&#x27;2006-03-01&#x27;</span>,age<span class="operator">=</span><span class="number">45</span> <span class="keyword">where</span> eno<span class="operator">=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改数据(将员工姓名叫旺财的人的月薪提高2000)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tbemp <span class="keyword">set</span> sal<span class="operator">=</span>sal<span class="operator">+</span><span class="number">2000</span> <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;旺财&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改数据(将员工生日为null的人的生日全部设置为2020-01-01)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tbemp <span class="keyword">set</span> hiredate<span class="operator">=</span><span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">where</span> hiredate <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p>数据库中是否为空（null）的判断不能使用“=”或“!=”应该使用 is null或者 is not null</p></blockquote></li></ol><h4 id="delete语句（删除）"><a href="#delete语句（删除）" class="headerlink" title="delete语句（删除）"></a>delete语句（删除）</h4><p><strong>语法：</strong></p><p><code>delete from 表名 where 条件  </code></p><ol><li><p>删除一行指定id的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tbemp <span class="keyword">where</span> eno<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除所有月薪为null的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tbemp <span class="keyword">where</span> sal <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><p>实际开发中，数据积累不容易，一般不会轻易使用物理删除；大多数时候会选择使用逻辑删除；所谓逻辑删除实际就是在表中增加一个标识列，通过该列的取值标记该列是否应该被查询到</p><p>因此针对删除需求，可以在表中新增一列用于标记该列是否被删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">alter</span> <span class="keyword">table</span> tbemp <span class="keyword">add</span> isdel tinyint;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="物理删除："><a href="#物理删除：" class="headerlink" title="物理删除："></a>物理删除：</h3><pre><code>使用delect 语句直接讲数据库中的数据删除掉</code></pre><h3 id="逻辑删除："><a href="#逻辑删除：" class="headerlink" title="逻辑删除："></a>逻辑删除：</h3><pre><code>实际上执行的是update语句，更新了该条数据的状态字段，一般状态字段的值：0表示删除，1表示有效如果要做逻辑删除，就是将stats字段的值更新为0,</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/0.html"/>
      <url>/article/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1). Hook是React 16.8.0版本增加的新特性/新语法</span><br><span class="line">(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</span><br></pre></td></tr></table></figure><h2 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1). State Hook: React.useState()</span><br><span class="line">(2). Effect Hook: React.useEffect()</span><br><span class="line">(3). Ref Hook: React.useRef()</span><br></pre></td></tr></table></figure><h2 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. State Hook</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</span><br><span class="line">(2). 语法: const [xxx, setXxx] = React.useState(initValue)  </span><br><span class="line">(3). useState()说明:</span><br><span class="line">        参数: 第一次初始化指定的值在内部作缓存</span><br><span class="line">        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数</span><br><span class="line">(4). setXxx()2种写法:</span><br><span class="line">        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</span><br><span class="line">        setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span><br></pre></td></tr></table></figure><h2 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. Effect Hook</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</span><br><span class="line">(2). React中的副作用操作:</span><br><span class="line">        发ajax请求数据获取</span><br><span class="line">        设置订阅 / 启动定时器</span><br><span class="line">        手动更改真实DOM</span><br><span class="line">(3). 语法和说明: </span><br><span class="line">        useEffect(() =&gt; &#123; </span><br><span class="line">          // 在此可以执行任何带副作用操作</span><br><span class="line">          return () =&gt; &#123; // 在组件卸载前执行</span><br><span class="line">            // 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行</span><br><span class="line">    </span><br><span class="line">(4). 可以把 useEffect Hook 看做如下三个函数的组合</span><br><span class="line">        componentDidMount()</span><br><span class="line">        componentDidUpdate()</span><br><span class="line">    componentWillUnmount() </span><br></pre></td></tr></table></figure><h2 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. Ref Hook</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据</span><br><span class="line">(2). 语法: const refContainer = useRef()</span><br><span class="line">(3). 作用:保存标签对象,功能与React.createRef()一样</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/0.html"/>
      <url>/article/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>count()</td><td>统计数据行</td></tr><tr><td>sum()</td><td>对指定列求和</td></tr><tr><td>avg()</td><td>对指定列求平均值</td></tr><tr><td>max()</td><td>获取指定列最大值</td></tr><tr><td>min()</td><td>获取指定列最小值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询表中一共有多少员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询所有员工的总薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询所有员工的月薪平均值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询工资最低的员工薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询工资最高的员工薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>concat (st2 [,… ])</td><td>连接多个字符串为一个字符串</td></tr><tr><td>length(s)</td><td>获取字符串的字节长度</td></tr><tr><td>lcase/ucase</td><td>字符串转小写/字符串转大写</td></tr><tr><td>ltrim(s)/rtrim(s)</td><td>去除字符串左边空格/右边空格</td></tr><tr><td>substr(s,pos,len)</td><td>将字符串s从pos开始截取len长</td></tr><tr><td>lpad/rpad</td><td>左填充/右填充</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取字符串使用的字符集</span></span><br><span class="line"><span class="keyword">select</span> charset(<span class="string">&#x27;helloworld&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将多个字符串连接为一个字符串</span></span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;softeem&#x27;</span>)</span><br><span class="line"><span class="comment">-- 应用</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> concat(ename,job,sex) <span class="keyword">like</span> <span class="string">&#x27;%阿%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回字符占据的字节数（中文字符占3字节(utf-8),英文字母占1个字节）</span></span><br><span class="line"><span class="keyword">select</span> length(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> length(<span class="string">&#x27;软帝softeem&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将字母转小写（toLowerCase）</span></span><br><span class="line"><span class="keyword">select</span> LCASE(<span class="string">&#x27;HELLO&#x27;</span>);</span><br><span class="line"><span class="comment">-- 转大写</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span> (<span class="string">&#x27;dsasa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 去除字符串空格</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; world &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左填充(对指定的字符串检测，长度如果未到达目标长度，则使用指定占位符从左边开始填充)</span></span><br><span class="line"><span class="keyword">select</span> LPAD(<span class="string">&#x27;softeem&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> LPAD(ename,<span class="number">10</span>,&quot;#&quot;) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> RPAD(ename,<span class="number">10</span>,&quot;#&quot;) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">use mydb;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbemp;</span><br><span class="line"><span class="comment">-- 字符串截取</span></span><br><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;abdcsa&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>abs(n)</td><td>取数值绝对值</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>ceiling(n)</td><td>向上取整</td></tr><tr><td>floor(n)</td><td>向下取整</td></tr><tr><td>format(n,len)</td><td>截取len位小数（四舍五入）</td></tr><tr><td>rand()</td><td>获取随机数(0-1)，取0-1之间随机的小数，无限接近于0且不会等于0，无限接近于1，且不会等于1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数值函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">abs</span>(<span class="number">-100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向上、向下取整</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CEILING</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">FLOOR</span>(<span class="number">3.54</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保留指定位小数点</span></span><br><span class="line"><span class="keyword">select</span> FORMAT(<span class="number">3.1415926</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">---随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(rand()<span class="operator">*</span><span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>now()</td><td>获取当前时间</td></tr><tr><td>current_date()</td><td>获取当前日期</td></tr><tr><td>current_time()</td><td>获取当前时间（时分秒）</td></tr><tr><td>current_timestamp()</td><td>获取当前时间戳</td></tr><tr><td>date()</td><td>获取时间的日期部分</td></tr><tr><td>day()</td><td>获取日期中的天数部分</td></tr><tr><td>datediff(t1,t2)</td><td>获取两个日期之差（天数）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 时间日期函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 获取当前的系统时间</span></span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CURRENT_DATE</span>();  <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CURRENT_TIME</span>();<span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CURRENT_TIMESTAMP</span>(); <span class="comment">-- 获取当前时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">date</span>(now());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计从出生到现在一共安全生活了多少天</span></span><br><span class="line"><span class="keyword">select</span> DATEDIFF(now(),<span class="string">&#x27;1998-07-29&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取日期中的day部分(天数)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> temp(today <span class="type">date</span>,msg <span class="type">varchar</span>(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">values</span>(<span class="built_in">CURRENT_DATE</span>(),<span class="string">&#x27;nothing&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日报表中获取当天提交的日报信息</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="built_in">log</span>(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">content <span class="type">varchar</span>(<span class="number">20000</span>),</span><br><span class="line"><span class="type">time</span> <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="built_in">log</span>(content,<span class="type">time</span>) <span class="keyword">values</span>(<span class="string">&#x27;n天前收获很多！！！&#x27;</span>,<span class="string">&#x27;2020-03-29 10:11:11&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> log <span class="keyword">where</span> <span class="type">date</span>(<span class="type">time</span>)<span class="operator">=</span><span class="type">date</span>(now()); </span><br><span class="line"><span class="comment">-- 查询所有的在29号发布的日志</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> log <span class="keyword">where</span> <span class="keyword">day</span>(<span class="type">time</span>)<span class="operator">=</span><span class="number">29</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加密函"><a href="#加密函" class="headerlink" title="加密函"></a>加密函</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>md5(s)</td><td>对字符串使用md5算法加密</td></tr><tr><td>sha(s)</td><td>对字符串使用sha加密</td></tr><tr><td>password(s)</td><td>使用sha1对字符串加密</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加密函数（非对称加密）</span></span><br><span class="line"><span class="keyword">select</span> password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> SHA(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line">这三种加密方式都是不可逆，不能反推破解</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单一职责原则</title>
      <link href="/article/20220921.html"/>
      <url>/article/20220921.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则"></a>一、单一职责原则</h2><h4 id="一、定义（是什么）"><a href="#一、定义（是什么）" class="headerlink" title="一、定义（是什么）"></a>一、定义（是什么）</h4><p>百度上的解释是</p><blockquote><p> <strong>单一职责原则</strong>（SRP：Single responsibility principle）又称单一功能原则，面向对象五个基本原则（SOLID）之一。它规定一个类应该只有一个发生变化的原因 。</p></blockquote><p>单一职责原则的原话是（ There should never be more than one reason for a class to change），这个和JAVA强调的高内聚低耦合不谋而合，单一职责见名知意就是说对于一个类来说，应该只有一个引起它变化的原因，应该只有一个职责，而相反的如果出现一个类拥有多个职责，这个类的某个职责的变化就会削弱或者抑制这个类完成其他职责的能力。这会导致脆弱的设计。</p><h4 id="二、优点（为什么）"><a href="#二、优点（为什么）" class="headerlink" title="二、优点（为什么）"></a>二、优点（为什么）</h4><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义;</li><li>可读性提高，复杂性降低，那当然可读性提高了;</li><li>可维护性提高，可读性提高，那当然更容易维护了;</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修 改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大 的帮助。 </li></ul><h4 id="三、应用范围（怎么做）"><a href="#三、应用范围（怎么做）" class="headerlink" title="三、应用范围（怎么做）"></a>三、应用范围（怎么做）</h4><p> 单一职责原则适用的范围有接口、方法、类。按大家的说法，接口和方法必须保证单一职责，类就不必保证，只要符合业务就行。 </p><h6 id="①接口方面"><a href="#①接口方面" class="headerlink" title="①接口方面"></a>①接口方面</h6><p>模拟一个场景，一个项目团队开发，A负责前端模块，B负责后端模块则可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DevelopInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A进行前端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A进行后端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B进行前端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B进行后端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个是不符合逻辑的，A只需要进行前端开发，他不需要去实现后端开发的接口，而B只需要后端开发不需要实现前端开发的接口，很明显不符合单一职责原则，改进一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DevelopInterface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">frontDevelopInterface</span> <span class="keyword">extends</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">baseDevelopInterface</span> <span class="keyword">extends</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">frontDevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A进行前端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">baseDevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B进行后端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A和B都没有实现多余的接口，A的前端开发方法实现不会影响到B的后端开发的方法实现，这就是符合单一职责原则，一个类只做一件事. 并且他的修改不会带来其他的变化。</p><h6 id="②方法层面"><a href="#②方法层面" class="headerlink" title="②方法层面"></a>②方法层面</h6><p>模拟一个修改用户密码和修改用户名的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperateEnum</span> &#123;</span><br><span class="line">    UPDATE_USERNAME,</span><br><span class="line">    UPDATE_PASSWORD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserInfo</span><span class="params">(OperateEnum type, UserInfo userInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOperateImpl</span> <span class="keyword">implements</span> <span class="title class_">UserOperate</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserInfo</span><span class="params">(OperateEnum type, UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == OperateEnum.UPDATE_PASSWORD) &#123;</span><br><span class="line">            <span class="comment">// 修改密码</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == OperateEnum.UPDATE_USERNAME) &#123;</span><br><span class="line">            <span class="comment">// 修改用户名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这种方法如果传入的用户n枚举类型有误并持久化到数据库，结果可能是未知的，下面是符合方法层面单一职责原则的接口，每个接口有自己固定的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserName</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserPassword</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOperateImpl</span> <span class="keyword">implements</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserName</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="comment">// 修改用户名逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserPassword</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="comment">// 修改密码逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="③类层面"><a href="#③类层面" class="headerlink" title="③类层面"></a>③类层面</h6><p>这是一个常见的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">LogOut</span> <span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    UserInfo <span class="title function_">selectByUserName</span> <span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是它的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class UserOperateImpl implements UserOperate&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void register(UserInfo userInfo) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean logIn(UserInfo userInfo) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean LogOut(UserInfo userInfo) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserInfo selectByUserName(UserInfo userInfo) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那如果按照单一职责原则拆分, 也可以拆分为下面的形式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">LogOut</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    UserInfo <span class="title function_">selectByUserName</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    UserInfo <span class="title function_">selectByUserName</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOperateImpl</span> <span class="keyword">implements</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">LogOut</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserInfo</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">selectByUserName</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么写的好处就是使每个类的功能更加内聚化，那么有问题了，那我直接一个接口一个实现类不更加高内聚了吗，其实也是可以的，如果代码量很多的话，这样是可行的。</p><h4 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h4><p>在日常开发中其实我们很多开发都是违背单一职责原则的， 类的单一职责确实受非常多因素的制约，纯理论地来讲，这个原则是非常优秀的，但是现实有现实的难处，你必须去考虑项目 工期、成本、人员技术水平、硬件情况、网络情况甚至有时候还要考虑政府政策、垄断协议 等因素。 </p><p><strong>因此对于单一职责原则，我的建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql基础</title>
      <link href="/article/20220922.html"/>
      <url>/article/20220922.html</url>
      
        <content type="html"><![CDATA[<p>​    </p><h1 id="MySql基础"><a href="#MySql基础" class="headerlink" title="MySql基础"></a>MySql基础</h1><h2 id="一、引擎"><a href="#一、引擎" class="headerlink" title="一、引擎"></a>一、引擎</h2><h4 id="1、引擎选择"><a href="#1、引擎选择" class="headerlink" title="1、引擎选择"></a>1、引擎选择</h4><table><thead><tr><th align="center">引擎</th><th align="center">特点</th><th align="center">场景</th><th>调优</th></tr></thead><tbody><tr><td align="center">InnoDB(5.5以后默认)</td><td align="center">支持热备份、存储限制（64TB）、支持事务、支持四隔离级别、支持外键、行级锁定、能缓存数据也能缓存索引</td><td align="center">①业务相关（银行转账等）②适合高并发，行级锁可以支持高并发不至于锁表，但需要确保查询是通过索引完成的③数据修改频繁的业务</td><td>①主键尽量小②避免全表扫描③尽量缓存索引和数据④避免主键更新</td></tr><tr><td align="center">MyISAM</td><td align="center">不支持事务、表级锁定（更新时锁定整个表）、读写互相阻塞。只会缓存索引。读取速度快、不支持外键、支持全文索引</td><td align="center">①不需要业务的场景②读数据多的③数据修改量少的④数据一致性要求不高的</td><td>①设置适合的索引②启用延迟写入，避免频繁写入③尽量顺序inset④降低并发数⑤MyISAM的count只有全表扫描比较高效，带有其它条件都需要进行实际数据访问</td></tr><tr><td align="center">Archive</td><td align="center">只支持INSERT和SELECT，I/O更少、SELECT需全表、支持行级锁定、非事务引擎</td><td align="center">日志和数据采集应用</td><td></td></tr><tr><td align="center">Blackhole</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">CSV</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">Federated</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">Memory</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">Merge</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">NDB</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">第三方</td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><p>​    大部分情况下采用innoDB</p><h4 id="2、引擎切换"><a href="#2、引擎切换" class="headerlink" title="2、引擎切换"></a>2、引擎切换</h4><h5 id="①alter-table"><a href="#①alter-table" class="headerlink" title="①alter table"></a>①alter table</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table mytable engine = InnoDB;</span><br></pre></td></tr></table></figure><h5 id="②导出导入"><a href="#②导出导入" class="headerlink" title="②导出导入"></a>②导出导入</h5><pre><code>     使用mysqldump工具 （musqldump工具在create table 之前会drop table）</code></pre><h5 id="③创建与查询"><a href="#③创建与查询" class="headerlink" title="③创建与查询"></a>③创建与查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table innodb_table like myisam_table;</span><br><span class="line">alter table innnodb_table engine =  InnoDB;</span><br><span class="line">// 数据量比较大的时候可以采用between and 分割</span><br><span class="line">insert into innnodb_table select * from myisam_table</span><br></pre></td></tr></table></figure><h2 id="二、基准测试"><a href="#二、基准测试" class="headerlink" title="二、基准测试"></a>二、基准测试</h2><h4 id="1、基准测试指标"><a href="#1、基准测试指标" class="headerlink" title="1、基准测试指标"></a>1、基准测试指标</h4><p>①吞吐量</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单位时间内事务的处理数</span><br></pre></td></tr></table></figure><p>②响应时间或延迟</p><p>③并发性</p><p>④可拓展性</p><h4 id="2、测试工具"><a href="#2、测试工具" class="headerlink" title="2、测试工具"></a>2、测试工具</h4><p>集成式：①ab ②http_load ③ JMeter</p><p>单组件式： ① mysqlsap ② MySQL Benchmark Suite（sql-bench）③ Super Smack ④ Database Test Suite ⑤ Percona’s TPCC-MySQL Tool ⑥ sysbench</p><h2 id="三、数据类型优化"><a href="#三、数据类型优化" class="headerlink" title="三、数据类型优化"></a>三、数据类型优化</h2><p>1）更小的通常更好</p><p>2）简单就好</p><p>3）尽量避免NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一、整数类型 在存储和计算过程中，int（1）和int（20）是相同的</span><br><span class="line">二、实数类型 mysql支持精确类型，也支持不精确类型</span><br><span class="line">三、字符串类型 varchar 和 char ，varchar是可变长字符串，列更新会有碎片，char是定长的不会有碎片；blob和text，blob是二进制，text是字符方式，memory不支持blob和text；枚举类型</span><br><span class="line">四、日期和时间类型 datetime和timestamp 除特殊行为之外，一般都采用timestamp</span><br><span class="line">五、位数据类型 bit和set</span><br><span class="line">六、选择标识符 </span><br></pre></td></tr></table></figure><p>修改表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">比较慢的一种，语句需要做多次读和插入操作</span><br><span class="line">alter table sakila.film modify cloumn rental_duration tinyint(3) not null default 5;</span><br><span class="line">比较快的一种</span><br><span class="line">alter table sakila.film alter cloumn rental_duration set default 5;</span><br></pre></td></tr></table></figure><h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><h4 id="1、索引类型"><a href="#1、索引类型" class="headerlink" title="1、索引类型"></a>1、索引类型</h4><table><thead><tr><th>索引</th><th>特点</th><th>缺点</th></tr></thead><tbody><tr><td>B-Tree索引</td><td>通过非叶子节点查询叶子节点获取对应的value，查询效率高</td><td>因为有冗余节点数据，会比较占内存</td></tr><tr><td>哈希索引</td><td>Hash是k,v形式，通过一个散列函数，能够根据key快速找到value；哈希索引就是采用一定的hash算法，把键值换成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需要一次hash算法即可立即定位到相应的位置，速度非常快。</td><td>因为底层数据结构是散列的，无法进行比较大小，不能进行范围查找</td></tr><tr><td>空间数据索引(R-Tree)</td><td>可以用做地理数据存储，会从所有维度来索引数据</td><td>必选使用MySQL的GIS相关函数如MBRCONTAINS()等来维护数据，但是mysql的GIS支持不完善</td></tr><tr><td>全文索引</td><td>适用于MATCH AGAINST条件匹配</td><td></td></tr><tr><td>其他索引</td><td></td><td></td></tr></tbody></table><p>B-Tree 索引    和哈希索引却别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、如果是等值查询，那么hash索引有明显的优势，因为只需要经过一次算法即可找到相应的键值；当然了，这个键值是唯一的，如果不唯一，则需要先找到下标位置再链式查找。</span><br><span class="line">2、从示意图可以知道，hash索引无法支持范围查询，因为原先是有序的键值，但是经过hash算法后，有可能变成不连续的，就没有办法利用索引完成范围查询检索数据。</span><br><span class="line">3、同样，hash索引也没办法利用索引完成排序，以及like `xxx%`这样的模糊查询（范围查询）。</span><br><span class="line">4、hash索引也不支持多列联合索引的最左前缀匹配规则。</span><br><span class="line">5、B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，在有大量重复键的情况下，hash索引的效率也是极低的，因为存在hash碰撞问题</span><br></pre></td></tr></table></figure><p>索引策略</p><p>①独立的列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无法使用索引的</span><br><span class="line">select cloumn from table where cloumn + 1 = 5;</span><br><span class="line">select .... where TO_DAys(CURRENT_DATE) - TO_DAYS(date_col) &lt;= 10;</span><br></pre></td></tr></table></figure><p>②前缀索引和索引选择性</p><p>③多列索引</p><h2 id="五、查询优化"><a href="#五、查询优化" class="headerlink" title="五、查询优化"></a>五、查询优化</h2><p>1）查询不需要的记录</p><p>2）多表关联时返回全部列</p><p>3）总是取出全部列</p><p>4）重复查询相同的数据</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/article/20220920.html"/>
      <url>/article/20220920.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 表格 </tag>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

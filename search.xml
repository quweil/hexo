<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单一职责原则</title>
      <link href="/article/20220921.html"/>
      <url>/article/20220921.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则"></a>一、单一职责原则</h2><h4 id="一、定义（是什么）"><a href="#一、定义（是什么）" class="headerlink" title="一、定义（是什么）"></a>一、定义（是什么）</h4><p>百度上的解释是</p><blockquote><p> <strong>单一职责原则</strong>（SRP：Single responsibility principle）又称单一功能原则，面向对象五个基本原则（SOLID）之一。它规定一个类应该只有一个发生变化的原因 。</p></blockquote><p>单一职责原则的原话是（ There should never be more than one reason for a class to change），这个和JAVA强调的高内聚低耦合不谋而合，单一职责见名知意就是说对于一个类来说，应该只有一个引起它变化的原因，应该只有一个职责，而相反的如果出现一个类拥有多个职责，这个类的某个职责的变化就会削弱或者抑制这个类完成其他职责的能力。这会导致脆弱的设计。</p><h4 id="二、优点（为什么）"><a href="#二、优点（为什么）" class="headerlink" title="二、优点（为什么）"></a>二、优点（为什么）</h4><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义;</li><li>可读性提高，复杂性降低，那当然可读性提高了;</li><li>可维护性提高，可读性提高，那当然更容易维护了;</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修 改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大 的帮助。 </li></ul><h4 id="三、应用范围（怎么做）"><a href="#三、应用范围（怎么做）" class="headerlink" title="三、应用范围（怎么做）"></a>三、应用范围（怎么做）</h4><p> 单一职责原则适用的范围有接口、方法、类。按大家的说法，接口和方法必须保证单一职责，类就不必保证，只要符合业务就行。 </p><h6 id="①接口方面"><a href="#①接口方面" class="headerlink" title="①接口方面"></a>①接口方面</h6><p>模拟一个场景，一个项目团队开发，A负责前端模块，B负责后端模块则可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DevelopInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A进行前端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A进行后端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B进行前端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B进行后端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个是不符合逻辑的，A只需要进行前端开发，他不需要去实现后端开发的接口，而B只需要后端开发不需要实现前端开发的接口，很明显不符合单一职责原则，改进一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DevelopInterface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">frontDevelopInterface</span> <span class="keyword">extends</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">baseDevelopInterface</span> <span class="keyword">extends</span> <span class="title class_">DevelopInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">frontDevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A进行前端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">baseDevelopInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">baseDevelop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B进行后端开发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A和B都没有实现多余的接口，A的前端开发方法实现不会影响到B的后端开发的方法实现，这就是符合单一职责原则，一个类只做一件事. 并且他的修改不会带来其他的变化。</p><h6 id="②方法层面"><a href="#②方法层面" class="headerlink" title="②方法层面"></a>②方法层面</h6><p>模拟一个修改用户密码和修改用户名的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperateEnum</span> &#123;</span><br><span class="line">    UPDATE_USERNAME,</span><br><span class="line">    UPDATE_PASSWORD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserInfo</span><span class="params">(OperateEnum type, UserInfo userInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOperateImpl</span> <span class="keyword">implements</span> <span class="title class_">UserOperate</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserInfo</span><span class="params">(OperateEnum type, UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == OperateEnum.UPDATE_PASSWORD) &#123;</span><br><span class="line">            <span class="comment">// 修改密码</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == OperateEnum.UPDATE_USERNAME) &#123;</span><br><span class="line">            <span class="comment">// 修改用户名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这种方法如果传入的用户n枚举类型有误并持久化到数据库，结果可能是未知的，下面是符合方法层面单一职责原则的接口，每个接口有自己固定的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserName</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserPassword</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOperateImpl</span> <span class="keyword">implements</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserName</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="comment">// 修改用户名逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserPassword</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="comment">// 修改密码逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="③类层面"><a href="#③类层面" class="headerlink" title="③类层面"></a>③类层面</h6><p>这是一个常见的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">LogOut</span> <span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    UserInfo <span class="title function_">selectByUserName</span> <span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是它的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class UserOperateImpl implements UserOperate&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void register(UserInfo userInfo) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean logIn(UserInfo userInfo) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean LogOut(UserInfo userInfo) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserInfo selectByUserName(UserInfo userInfo) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那如果按照单一职责原则拆分, 也可以拆分为下面的形式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">LogOut</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">    UserInfo <span class="title function_">selectByUserName</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    UserInfo <span class="title function_">selectByUserName</span><span class="params">(UserInfo userInfo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserOperateImpl</span> <span class="keyword">implements</span> <span class="title class_">UserOperate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">LogOut</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserInfo</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">selectByUserName</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么写的好处就是使每个类的功能更加内聚化，那么有问题了，那我直接一个接口一个实现类不更加高内聚了吗，其实也是可以的，如果代码量很多的话，这样是可行的。</p><h4 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h4><p>在日常开发中其实我们很多开发都是违背单一职责原则的， 类的单一职责确实受非常多因素的制约，纯理论地来讲，这个原则是非常优秀的，但是现实有现实的难处，你必须去考虑项目 工期、成本、人员技术水平、硬件情况、网络情况甚至有时候还要考虑政府政策、垄断协议 等因素。 </p><p><strong>因此对于单一职责原则，我的建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql基础</title>
      <link href="/article/20220922.html"/>
      <url>/article/20220922.html</url>
      
        <content type="html"><![CDATA[<p>​    </p><h1 id="MySql基础"><a href="#MySql基础" class="headerlink" title="MySql基础"></a>MySql基础</h1><h2 id="一、引擎"><a href="#一、引擎" class="headerlink" title="一、引擎"></a>一、引擎</h2><h4 id="1、引擎选择"><a href="#1、引擎选择" class="headerlink" title="1、引擎选择"></a>1、引擎选择</h4><table><thead><tr><th align="center">引擎</th><th align="center">特点</th><th align="center">场景</th><th>调优</th></tr></thead><tbody><tr><td align="center">InnoDB(5.5以后默认)</td><td align="center">支持热备份、存储限制（64TB）、支持事务、支持四隔离级别、支持外键、行级锁定、能缓存数据也能缓存索引</td><td align="center">①业务相关（银行转账等）②适合高并发，行级锁可以支持高并发不至于锁表，但需要确保查询是通过索引完成的③数据修改频繁的业务</td><td>①主键尽量小②避免全表扫描③尽量缓存索引和数据④避免主键更新</td></tr><tr><td align="center">MyISAM</td><td align="center">不支持事务、表级锁定（更新时锁定整个表）、读写互相阻塞。只会缓存索引。读取速度快、不支持外键、支持全文索引</td><td align="center">①不需要业务的场景②读数据多的③数据修改量少的④数据一致性要求不高的</td><td>①设置适合的索引②启用延迟写入，避免频繁写入③尽量顺序inset④降低并发数⑤MyISAM的count只有全表扫描比较高效，带有其它条件都需要进行实际数据访问</td></tr><tr><td align="center">Archive</td><td align="center">只支持INSERT和SELECT，I/O更少、SELECT需全表、支持行级锁定、非事务引擎</td><td align="center">日志和数据采集应用</td><td></td></tr><tr><td align="center">Blackhole</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">CSV</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">Federated</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">Memory</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">Merge</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">NDB</td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">第三方</td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><p>​    大部分情况下采用innoDB</p><h4 id="2、引擎切换"><a href="#2、引擎切换" class="headerlink" title="2、引擎切换"></a>2、引擎切换</h4><h5 id="①alter-table"><a href="#①alter-table" class="headerlink" title="①alter table"></a>①alter table</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table mytable engine = InnoDB;</span><br></pre></td></tr></table></figure><h5 id="②导出导入"><a href="#②导出导入" class="headerlink" title="②导出导入"></a>②导出导入</h5><pre><code>     使用mysqldump工具 （musqldump工具在create table 之前会drop table）</code></pre><h5 id="③创建与查询"><a href="#③创建与查询" class="headerlink" title="③创建与查询"></a>③创建与查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table innodb_table like myisam_table;</span><br><span class="line">alter table innnodb_table engine =  InnoDB;</span><br><span class="line">// 数据量比较大的时候可以采用between and 分割</span><br><span class="line">insert into innnodb_table select * from myisam_table</span><br></pre></td></tr></table></figure><h2 id="二、基准测试"><a href="#二、基准测试" class="headerlink" title="二、基准测试"></a>二、基准测试</h2><h4 id="1、基准测试指标"><a href="#1、基准测试指标" class="headerlink" title="1、基准测试指标"></a>1、基准测试指标</h4><p>①吞吐量</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单位时间内事务的处理数</span><br></pre></td></tr></table></figure><p>②响应时间或延迟</p><p>③并发性</p><p>④可拓展性</p><h4 id="2、测试工具"><a href="#2、测试工具" class="headerlink" title="2、测试工具"></a>2、测试工具</h4><p>集成式：①ab ②http_load ③ JMeter</p><p>单组件式： ① mysqlsap ② MySQL Benchmark Suite（sql-bench）③ Super Smack ④ Database Test Suite ⑤ Percona’s TPCC-MySQL Tool ⑥ sysbench</p><h2 id="三、数据类型优化"><a href="#三、数据类型优化" class="headerlink" title="三、数据类型优化"></a>三、数据类型优化</h2><p>1）更小的通常更好</p><p>2）简单就好</p><p>3）尽量避免NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一、整数类型 在存储和计算过程中，int（1）和int（20）是相同的</span><br><span class="line">二、实数类型 mysql支持精确类型，也支持不精确类型</span><br><span class="line">三、字符串类型 varchar 和 char ，varchar是可变长字符串，列更新会有碎片，char是定长的不会有碎片；blob和text，blob是二进制，text是字符方式，memory不支持blob和text；枚举类型</span><br><span class="line">四、日期和时间类型 datetime和timestamp 除特殊行为之外，一般都采用timestamp</span><br><span class="line">五、位数据类型 bit和set</span><br><span class="line">六、选择标识符 </span><br></pre></td></tr></table></figure><p>修改表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">比较慢的一种，语句需要做多次读和插入操作</span><br><span class="line">alter table sakila.film modify cloumn rental_duration tinyint(3) not null default 5;</span><br><span class="line">比较快的一种</span><br><span class="line">alter table sakila.film alter cloumn rental_duration set default 5;</span><br></pre></td></tr></table></figure><h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><h4 id="1、索引类型"><a href="#1、索引类型" class="headerlink" title="1、索引类型"></a>1、索引类型</h4><table><thead><tr><th>索引</th><th>特点</th><th>缺点</th></tr></thead><tbody><tr><td>B-Tree索引</td><td>通过非叶子节点查询叶子节点获取对应的value，查询效率高</td><td>因为有冗余节点数据，会比较占内存</td></tr><tr><td>哈希索引</td><td>Hash是k,v形式，通过一个散列函数，能够根据key快速找到value；哈希索引就是采用一定的hash算法，把键值换成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需要一次hash算法即可立即定位到相应的位置，速度非常快。</td><td>因为底层数据结构是散列的，无法进行比较大小，不能进行范围查找</td></tr><tr><td>空间数据索引(R-Tree)</td><td>可以用做地理数据存储，会从所有维度来索引数据</td><td>必选使用MySQL的GIS相关函数如MBRCONTAINS()等来维护数据，但是mysql的GIS支持不完善</td></tr><tr><td>全文索引</td><td>适用于MATCH AGAINST条件匹配</td><td></td></tr><tr><td>其他索引</td><td></td><td></td></tr></tbody></table><p>B-Tree 索引    和哈希索引却别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、如果是等值查询，那么hash索引有明显的优势，因为只需要经过一次算法即可找到相应的键值；当然了，这个键值是唯一的，如果不唯一，则需要先找到下标位置再链式查找。</span><br><span class="line">2、从示意图可以知道，hash索引无法支持范围查询，因为原先是有序的键值，但是经过hash算法后，有可能变成不连续的，就没有办法利用索引完成范围查询检索数据。</span><br><span class="line">3、同样，hash索引也没办法利用索引完成排序，以及like `xxx%`这样的模糊查询（范围查询）。</span><br><span class="line">4、hash索引也不支持多列联合索引的最左前缀匹配规则。</span><br><span class="line">5、B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，在有大量重复键的情况下，hash索引的效率也是极低的，因为存在hash碰撞问题</span><br></pre></td></tr></table></figure><p>索引策略</p><p>①独立的列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无法使用索引的</span><br><span class="line">select cloumn from table where cloumn + 1 = 5;</span><br><span class="line">select .... where TO_DAys(CURRENT_DATE) - TO_DAYS(date_col) &lt;= 10;</span><br></pre></td></tr></table></figure><p>②前缀索引和索引选择性</p><p>③多列索引</p><h2 id="五、查询优化"><a href="#五、查询优化" class="headerlink" title="五、查询优化"></a>五、查询优化</h2><p>1）查询不需要的记录</p><p>2）多表关联时返回全部列</p><p>3）总是取出全部列</p><p>4）重复查询相同的数据</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/article/20220920.html"/>
      <url>/article/20220920.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 表格 </tag>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
